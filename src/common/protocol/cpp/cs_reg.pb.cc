// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_reg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_reg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoCs {

namespace {

const ::google::protobuf::Descriptor* QuickRegReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuickRegReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuickRegRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuickRegRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* NormalRegReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NormalRegReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NormalRegRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NormalRegRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* BindAccountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BindAccountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BindAccountRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BindAccountRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* EditPasswordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EditPasswordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EditPasswordRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EditPasswordRes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CsRegProtoRet_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5freg_2eproto() {
  protobuf_AddDesc_cs_5freg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_reg.proto");
  GOOGLE_CHECK(file != NULL);
  QuickRegReq_descriptor_ = file->message_type(0);
  static const int QuickRegReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickRegReq, numb_),
  };
  QuickRegReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuickRegReq_descriptor_,
      QuickRegReq::default_instance_,
      QuickRegReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickRegReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickRegReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuickRegReq));
  QuickRegRes_descriptor_ = file->message_type(1);
  static const int QuickRegRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickRegRes, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickRegRes, password_),
  };
  QuickRegRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuickRegRes_descriptor_,
      QuickRegRes::default_instance_,
      QuickRegRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickRegRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickRegRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuickRegRes));
  NormalRegReq_descriptor_ = file->message_type(2);
  static const int NormalRegReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalRegReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalRegReq, password_),
  };
  NormalRegReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NormalRegReq_descriptor_,
      NormalRegReq::default_instance_,
      NormalRegReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalRegReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalRegReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NormalRegReq));
  NormalRegRes_descriptor_ = file->message_type(3);
  static const int NormalRegRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalRegRes, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalRegRes, password_),
  };
  NormalRegRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NormalRegRes_descriptor_,
      NormalRegRes::default_instance_,
      NormalRegRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalRegRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalRegRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NormalRegRes));
  BindAccountReq_descriptor_ = file->message_type(4);
  static const int BindAccountReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAccountReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAccountReq, password_),
  };
  BindAccountReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BindAccountReq_descriptor_,
      BindAccountReq::default_instance_,
      BindAccountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAccountReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAccountReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BindAccountReq));
  BindAccountRes_descriptor_ = file->message_type(5);
  static const int BindAccountRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAccountRes, numb_),
  };
  BindAccountRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BindAccountRes_descriptor_,
      BindAccountRes::default_instance_,
      BindAccountRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAccountRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAccountRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BindAccountRes));
  EditPasswordReq_descriptor_ = file->message_type(6);
  static const int EditPasswordReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditPasswordReq, old_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditPasswordReq, new_password_),
  };
  EditPasswordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EditPasswordReq_descriptor_,
      EditPasswordReq::default_instance_,
      EditPasswordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditPasswordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditPasswordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EditPasswordReq));
  EditPasswordRes_descriptor_ = file->message_type(7);
  static const int EditPasswordRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditPasswordRes, numb_),
  };
  EditPasswordRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EditPasswordRes_descriptor_,
      EditPasswordRes::default_instance_,
      EditPasswordRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditPasswordRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditPasswordRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EditPasswordRes));
  CsRegProtoRet_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5freg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuickRegReq_descriptor_, &QuickRegReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuickRegRes_descriptor_, &QuickRegRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NormalRegReq_descriptor_, &NormalRegReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NormalRegRes_descriptor_, &NormalRegRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BindAccountReq_descriptor_, &BindAccountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BindAccountRes_descriptor_, &BindAccountRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EditPasswordReq_descriptor_, &EditPasswordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EditPasswordRes_descriptor_, &EditPasswordRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5freg_2eproto() {
  delete QuickRegReq::default_instance_;
  delete QuickRegReq_reflection_;
  delete QuickRegRes::default_instance_;
  delete QuickRegRes_reflection_;
  delete NormalRegReq::default_instance_;
  delete NormalRegReq_reflection_;
  delete NormalRegRes::default_instance_;
  delete NormalRegRes_reflection_;
  delete BindAccountReq::default_instance_;
  delete BindAccountReq_reflection_;
  delete BindAccountRes::default_instance_;
  delete BindAccountRes_reflection_;
  delete EditPasswordReq::default_instance_;
  delete EditPasswordReq_reflection_;
  delete EditPasswordRes::default_instance_;
  delete EditPasswordRes_reflection_;
}

void protobuf_AddDesc_cs_5freg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014cs_reg.proto\022\007ProtoCs\"\033\n\013QuickRegReq\022\014"
    "\n\004numb\030\001 \001(\010\"0\n\013QuickRegRes\022\017\n\007account\030\001"
    " \001(\014\022\020\n\010password\030\002 \001(\014\"1\n\014NormalRegReq\022\017"
    "\n\007account\030\001 \001(\014\022\020\n\010password\030\002 \001(\014\"1\n\014Nor"
    "malRegRes\022\017\n\007account\030\001 \001(\014\022\020\n\010password\030\002"
    " \001(\014\"3\n\016BindAccountReq\022\017\n\007account\030\001 \001(\014\022"
    "\020\n\010password\030\002 \001(\014\"\036\n\016BindAccountRes\022\014\n\004n"
    "umb\030\001 \001(\010\"=\n\017EditPasswordReq\022\024\n\014old_pass"
    "word\030\001 \001(\014\022\024\n\014new_password\030\002 \001(\014\"\037\n\017Edit"
    "PasswordRes\022\014\n\004numb\030\001 \001(\010*\332\002\n\rCsRegProto"
    "Ret\022\024\n\020RET_QUICK_REG_OK\020\000\022!\n\024RET_QUICK_R"
    "EG_FAILED\020\377\377\377\377\377\377\377\377\377\001\022\'\n\032RET_QUICK_REG_GA"
    "MESVR_FULL\020\376\377\377\377\377\377\377\377\377\001\022\025\n\021RET_NORMAL_REG_"
    "OK\020\000\022\"\n\025RET_NORMAL_REG_FAILED\020\377\377\377\377\377\377\377\377\377\001"
    "\022(\n\033RET_NORMAL_REG_GAMESVR_FULL\020\376\377\377\377\377\377\377\377"
    "\377\001\022\027\n\023RET_BIND_ACCOUNT_OK\020\000\022$\n\027RET_BIND_"
    "ACCOUNT_FAILED\020\377\377\377\377\377\377\377\377\377\001\022\030\n\024RET_EDIT_PA"
    "SSWORD_OK\020\000\022%\n\030RET_EDIT_PASSWORD_FAILED\020"
    "\377\377\377\377\377\377\377\377\377\001\032\002\020\001", 734);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_reg.proto", &protobuf_RegisterTypes);
  QuickRegReq::default_instance_ = new QuickRegReq();
  QuickRegRes::default_instance_ = new QuickRegRes();
  NormalRegReq::default_instance_ = new NormalRegReq();
  NormalRegRes::default_instance_ = new NormalRegRes();
  BindAccountReq::default_instance_ = new BindAccountReq();
  BindAccountRes::default_instance_ = new BindAccountRes();
  EditPasswordReq::default_instance_ = new EditPasswordReq();
  EditPasswordRes::default_instance_ = new EditPasswordRes();
  QuickRegReq::default_instance_->InitAsDefaultInstance();
  QuickRegRes::default_instance_->InitAsDefaultInstance();
  NormalRegReq::default_instance_->InitAsDefaultInstance();
  NormalRegRes::default_instance_->InitAsDefaultInstance();
  BindAccountReq::default_instance_->InitAsDefaultInstance();
  BindAccountRes::default_instance_->InitAsDefaultInstance();
  EditPasswordReq::default_instance_->InitAsDefaultInstance();
  EditPasswordRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5freg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5freg_2eproto {
  StaticDescriptorInitializer_cs_5freg_2eproto() {
    protobuf_AddDesc_cs_5freg_2eproto();
  }
} static_descriptor_initializer_cs_5freg_2eproto_;
const ::google::protobuf::EnumDescriptor* CsRegProtoRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CsRegProtoRet_descriptor_;
}
bool CsRegProtoRet_IsValid(int value) {
  switch(value) {
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int QuickRegReq::kNumbFieldNumber;
#endif  // !_MSC_VER

QuickRegReq::QuickRegReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuickRegReq::InitAsDefaultInstance() {
}

QuickRegReq::QuickRegReq(const QuickRegReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuickRegReq::SharedCtor() {
  _cached_size_ = 0;
  numb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuickRegReq::~QuickRegReq() {
  SharedDtor();
}

void QuickRegReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuickRegReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuickRegReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuickRegReq_descriptor_;
}

const QuickRegReq& QuickRegReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5freg_2eproto();
  return *default_instance_;
}

QuickRegReq* QuickRegReq::default_instance_ = NULL;

QuickRegReq* QuickRegReq::New() const {
  return new QuickRegReq;
}

void QuickRegReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    numb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuickRegReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool numb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &numb_)));
          set_has_numb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuickRegReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool numb = 1;
  if (has_numb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->numb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuickRegReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool numb = 1;
  if (has_numb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->numb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuickRegReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool numb = 1;
    if (has_numb()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuickRegReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuickRegReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuickRegReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuickRegReq::MergeFrom(const QuickRegReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numb()) {
      set_numb(from.numb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuickRegReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuickRegReq::CopyFrom(const QuickRegReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuickRegReq::IsInitialized() const {

  return true;
}

void QuickRegReq::Swap(QuickRegReq* other) {
  if (other != this) {
    std::swap(numb_, other->numb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuickRegReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuickRegReq_descriptor_;
  metadata.reflection = QuickRegReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuickRegRes::kAccountFieldNumber;
const int QuickRegRes::kPasswordFieldNumber;
#endif  // !_MSC_VER

QuickRegRes::QuickRegRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuickRegRes::InitAsDefaultInstance() {
}

QuickRegRes::QuickRegRes(const QuickRegRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuickRegRes::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuickRegRes::~QuickRegRes() {
  SharedDtor();
}

void QuickRegRes::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void QuickRegRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuickRegRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuickRegRes_descriptor_;
}

const QuickRegRes& QuickRegRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5freg_2eproto();
  return *default_instance_;
}

QuickRegRes* QuickRegRes::default_instance_ = NULL;

QuickRegRes* QuickRegRes::New() const {
  return new QuickRegRes;
}

void QuickRegRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuickRegRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional bytes password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuickRegRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // optional bytes password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuickRegRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // optional bytes password = 2;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuickRegRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional bytes password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuickRegRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuickRegRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuickRegRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuickRegRes::MergeFrom(const QuickRegRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuickRegRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuickRegRes::CopyFrom(const QuickRegRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuickRegRes::IsInitialized() const {

  return true;
}

void QuickRegRes::Swap(QuickRegRes* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuickRegRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuickRegRes_descriptor_;
  metadata.reflection = QuickRegRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NormalRegReq::kAccountFieldNumber;
const int NormalRegReq::kPasswordFieldNumber;
#endif  // !_MSC_VER

NormalRegReq::NormalRegReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NormalRegReq::InitAsDefaultInstance() {
}

NormalRegReq::NormalRegReq(const NormalRegReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NormalRegReq::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NormalRegReq::~NormalRegReq() {
  SharedDtor();
}

void NormalRegReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void NormalRegReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalRegReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NormalRegReq_descriptor_;
}

const NormalRegReq& NormalRegReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5freg_2eproto();
  return *default_instance_;
}

NormalRegReq* NormalRegReq::default_instance_ = NULL;

NormalRegReq* NormalRegReq::New() const {
  return new NormalRegReq;
}

void NormalRegReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NormalRegReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional bytes password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NormalRegReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // optional bytes password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NormalRegReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // optional bytes password = 2;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NormalRegReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional bytes password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalRegReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NormalRegReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NormalRegReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NormalRegReq::MergeFrom(const NormalRegReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NormalRegReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalRegReq::CopyFrom(const NormalRegReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalRegReq::IsInitialized() const {

  return true;
}

void NormalRegReq::Swap(NormalRegReq* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NormalRegReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NormalRegReq_descriptor_;
  metadata.reflection = NormalRegReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NormalRegRes::kAccountFieldNumber;
const int NormalRegRes::kPasswordFieldNumber;
#endif  // !_MSC_VER

NormalRegRes::NormalRegRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NormalRegRes::InitAsDefaultInstance() {
}

NormalRegRes::NormalRegRes(const NormalRegRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NormalRegRes::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NormalRegRes::~NormalRegRes() {
  SharedDtor();
}

void NormalRegRes::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void NormalRegRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalRegRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NormalRegRes_descriptor_;
}

const NormalRegRes& NormalRegRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5freg_2eproto();
  return *default_instance_;
}

NormalRegRes* NormalRegRes::default_instance_ = NULL;

NormalRegRes* NormalRegRes::New() const {
  return new NormalRegRes;
}

void NormalRegRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NormalRegRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional bytes password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NormalRegRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // optional bytes password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NormalRegRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // optional bytes password = 2;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NormalRegRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional bytes password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalRegRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NormalRegRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NormalRegRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NormalRegRes::MergeFrom(const NormalRegRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NormalRegRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalRegRes::CopyFrom(const NormalRegRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalRegRes::IsInitialized() const {

  return true;
}

void NormalRegRes::Swap(NormalRegRes* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NormalRegRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NormalRegRes_descriptor_;
  metadata.reflection = NormalRegRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BindAccountReq::kAccountFieldNumber;
const int BindAccountReq::kPasswordFieldNumber;
#endif  // !_MSC_VER

BindAccountReq::BindAccountReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BindAccountReq::InitAsDefaultInstance() {
}

BindAccountReq::BindAccountReq(const BindAccountReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BindAccountReq::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BindAccountReq::~BindAccountReq() {
  SharedDtor();
}

void BindAccountReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void BindAccountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindAccountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BindAccountReq_descriptor_;
}

const BindAccountReq& BindAccountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5freg_2eproto();
  return *default_instance_;
}

BindAccountReq* BindAccountReq::default_instance_ = NULL;

BindAccountReq* BindAccountReq::New() const {
  return new BindAccountReq;
}

void BindAccountReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BindAccountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional bytes password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BindAccountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // optional bytes password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BindAccountReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // optional bytes password = 2;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BindAccountReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional bytes password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindAccountReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BindAccountReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BindAccountReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BindAccountReq::MergeFrom(const BindAccountReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BindAccountReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindAccountReq::CopyFrom(const BindAccountReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindAccountReq::IsInitialized() const {

  return true;
}

void BindAccountReq::Swap(BindAccountReq* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BindAccountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BindAccountReq_descriptor_;
  metadata.reflection = BindAccountReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BindAccountRes::kNumbFieldNumber;
#endif  // !_MSC_VER

BindAccountRes::BindAccountRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BindAccountRes::InitAsDefaultInstance() {
}

BindAccountRes::BindAccountRes(const BindAccountRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BindAccountRes::SharedCtor() {
  _cached_size_ = 0;
  numb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BindAccountRes::~BindAccountRes() {
  SharedDtor();
}

void BindAccountRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BindAccountRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindAccountRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BindAccountRes_descriptor_;
}

const BindAccountRes& BindAccountRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5freg_2eproto();
  return *default_instance_;
}

BindAccountRes* BindAccountRes::default_instance_ = NULL;

BindAccountRes* BindAccountRes::New() const {
  return new BindAccountRes;
}

void BindAccountRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    numb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BindAccountRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool numb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &numb_)));
          set_has_numb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BindAccountRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool numb = 1;
  if (has_numb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->numb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BindAccountRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool numb = 1;
  if (has_numb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->numb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BindAccountRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool numb = 1;
    if (has_numb()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindAccountRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BindAccountRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BindAccountRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BindAccountRes::MergeFrom(const BindAccountRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numb()) {
      set_numb(from.numb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BindAccountRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindAccountRes::CopyFrom(const BindAccountRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindAccountRes::IsInitialized() const {

  return true;
}

void BindAccountRes::Swap(BindAccountRes* other) {
  if (other != this) {
    std::swap(numb_, other->numb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BindAccountRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BindAccountRes_descriptor_;
  metadata.reflection = BindAccountRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EditPasswordReq::kOldPasswordFieldNumber;
const int EditPasswordReq::kNewPasswordFieldNumber;
#endif  // !_MSC_VER

EditPasswordReq::EditPasswordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EditPasswordReq::InitAsDefaultInstance() {
}

EditPasswordReq::EditPasswordReq(const EditPasswordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EditPasswordReq::SharedCtor() {
  _cached_size_ = 0;
  old_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EditPasswordReq::~EditPasswordReq() {
  SharedDtor();
}

void EditPasswordReq::SharedDtor() {
  if (old_password_ != &::google::protobuf::internal::kEmptyString) {
    delete old_password_;
  }
  if (new_password_ != &::google::protobuf::internal::kEmptyString) {
    delete new_password_;
  }
  if (this != default_instance_) {
  }
}

void EditPasswordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EditPasswordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EditPasswordReq_descriptor_;
}

const EditPasswordReq& EditPasswordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5freg_2eproto();
  return *default_instance_;
}

EditPasswordReq* EditPasswordReq::default_instance_ = NULL;

EditPasswordReq* EditPasswordReq::New() const {
  return new EditPasswordReq;
}

void EditPasswordReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_old_password()) {
      if (old_password_ != &::google::protobuf::internal::kEmptyString) {
        old_password_->clear();
      }
    }
    if (has_new_password()) {
      if (new_password_ != &::google::protobuf::internal::kEmptyString) {
        new_password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EditPasswordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes old_password = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_old_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_password;
        break;
      }

      // optional bytes new_password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EditPasswordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes old_password = 1;
  if (has_old_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->old_password(), output);
  }

  // optional bytes new_password = 2;
  if (has_new_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->new_password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EditPasswordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes old_password = 1;
  if (has_old_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->old_password(), target);
  }

  // optional bytes new_password = 2;
  if (has_new_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->new_password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EditPasswordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes old_password = 1;
    if (has_old_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->old_password());
    }

    // optional bytes new_password = 2;
    if (has_new_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->new_password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EditPasswordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EditPasswordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EditPasswordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EditPasswordReq::MergeFrom(const EditPasswordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_password()) {
      set_old_password(from.old_password());
    }
    if (from.has_new_password()) {
      set_new_password(from.new_password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EditPasswordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditPasswordReq::CopyFrom(const EditPasswordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditPasswordReq::IsInitialized() const {

  return true;
}

void EditPasswordReq::Swap(EditPasswordReq* other) {
  if (other != this) {
    std::swap(old_password_, other->old_password_);
    std::swap(new_password_, other->new_password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EditPasswordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EditPasswordReq_descriptor_;
  metadata.reflection = EditPasswordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EditPasswordRes::kNumbFieldNumber;
#endif  // !_MSC_VER

EditPasswordRes::EditPasswordRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EditPasswordRes::InitAsDefaultInstance() {
}

EditPasswordRes::EditPasswordRes(const EditPasswordRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EditPasswordRes::SharedCtor() {
  _cached_size_ = 0;
  numb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EditPasswordRes::~EditPasswordRes() {
  SharedDtor();
}

void EditPasswordRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EditPasswordRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EditPasswordRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EditPasswordRes_descriptor_;
}

const EditPasswordRes& EditPasswordRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5freg_2eproto();
  return *default_instance_;
}

EditPasswordRes* EditPasswordRes::default_instance_ = NULL;

EditPasswordRes* EditPasswordRes::New() const {
  return new EditPasswordRes;
}

void EditPasswordRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    numb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EditPasswordRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool numb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &numb_)));
          set_has_numb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EditPasswordRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool numb = 1;
  if (has_numb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->numb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EditPasswordRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool numb = 1;
  if (has_numb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->numb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EditPasswordRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool numb = 1;
    if (has_numb()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EditPasswordRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EditPasswordRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EditPasswordRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EditPasswordRes::MergeFrom(const EditPasswordRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numb()) {
      set_numb(from.numb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EditPasswordRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditPasswordRes::CopyFrom(const EditPasswordRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditPasswordRes::IsInitialized() const {

  return true;
}

void EditPasswordRes::Swap(EditPasswordRes* other) {
  if (other != this) {
    std::swap(numb_, other->numb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EditPasswordRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EditPasswordRes_descriptor_;
  metadata.reflection = EditPasswordRes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoCs

// @@protoc_insertion_point(global_scope)
