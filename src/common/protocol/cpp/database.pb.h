// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: database.proto

#ifndef PROTOBUF_database_2eproto__INCLUDED
#define PROTOBUF_database_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Database {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_database_2eproto();
void protobuf_AssignDesc_database_2eproto();
void protobuf_ShutdownFile_database_2eproto();

class RoleInfo;
class CityInfo;
class PlayerData;

// ===================================================================

class RoleInfo : public ::google::protobuf::Message {
 public:
  RoleInfo();
  virtual ~RoleInfo();

  RoleInfo(const RoleInfo& from);

  inline RoleInfo& operator=(const RoleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleInfo& default_instance();

  void Swap(RoleInfo* other);

  // implements Message ----------------------------------------------

  RoleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleInfo& from);
  void MergeFrom(const RoleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 money = 1;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 1;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Database.RoleInfo)
 private:
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_database_2eproto();
  friend void protobuf_AssignDesc_database_2eproto();
  friend void protobuf_ShutdownFile_database_2eproto();

  void InitAsDefaultInstance();
  static RoleInfo* default_instance_;
};
// -------------------------------------------------------------------

class CityInfo : public ::google::protobuf::Message {
 public:
  CityInfo();
  virtual ~CityInfo();

  CityInfo(const CityInfo& from);

  inline CityInfo& operator=(const CityInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CityInfo& default_instance();

  void Swap(CityInfo* other);

  // implements Message ----------------------------------------------

  CityInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CityInfo& from);
  void MergeFrom(const CityInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 population = 2;
  inline bool has_population() const;
  inline void clear_population();
  static const int kPopulationFieldNumber = 2;
  inline ::google::protobuf::int32 population() const;
  inline void set_population(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Database.CityInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_population();
  inline void clear_has_population();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 population_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_database_2eproto();
  friend void protobuf_AssignDesc_database_2eproto();
  friend void protobuf_ShutdownFile_database_2eproto();

  void InitAsDefaultInstance();
  static CityInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerData : public ::google::protobuf::Message {
 public:
  PlayerData();
  virtual ~PlayerData();

  PlayerData(const PlayerData& from);

  inline PlayerData& operator=(const PlayerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerData& default_instance();

  void Swap(PlayerData* other);

  // implements Message ----------------------------------------------

  PlayerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerData& from);
  void MergeFrom(const PlayerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Database.RoleInfo role_info = 1;
  inline bool has_role_info() const;
  inline void clear_role_info();
  static const int kRoleInfoFieldNumber = 1;
  inline const ::Database::RoleInfo& role_info() const;
  inline ::Database::RoleInfo* mutable_role_info();
  inline ::Database::RoleInfo* release_role_info();
  inline void set_allocated_role_info(::Database::RoleInfo* role_info);

  // repeated .Database.CityInfo city_list = 2;
  inline int city_list_size() const;
  inline void clear_city_list();
  static const int kCityListFieldNumber = 2;
  inline const ::Database::CityInfo& city_list(int index) const;
  inline ::Database::CityInfo* mutable_city_list(int index);
  inline ::Database::CityInfo* add_city_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Database::CityInfo >&
      city_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Database::CityInfo >*
      mutable_city_list();

  // @@protoc_insertion_point(class_scope:Database.PlayerData)
 private:
  inline void set_has_role_info();
  inline void clear_has_role_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Database::RoleInfo* role_info_;
  ::google::protobuf::RepeatedPtrField< ::Database::CityInfo > city_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_database_2eproto();
  friend void protobuf_AssignDesc_database_2eproto();
  friend void protobuf_ShutdownFile_database_2eproto();

  void InitAsDefaultInstance();
  static PlayerData* default_instance_;
};
// ===================================================================


// ===================================================================

// RoleInfo

// optional int32 money = 1;
inline bool RoleInfo::has_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleInfo::set_has_money() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleInfo::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 RoleInfo::money() const {
  return money_;
}
inline void RoleInfo::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// optional int32 level = 2;
inline bool RoleInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 RoleInfo::level() const {
  return level_;
}
inline void RoleInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// CityInfo

// optional int32 id = 1;
inline bool CityInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CityInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CityInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CityInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CityInfo::id() const {
  return id_;
}
inline void CityInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 population = 2;
inline bool CityInfo::has_population() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CityInfo::set_has_population() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CityInfo::clear_has_population() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CityInfo::clear_population() {
  population_ = 0;
  clear_has_population();
}
inline ::google::protobuf::int32 CityInfo::population() const {
  return population_;
}
inline void CityInfo::set_population(::google::protobuf::int32 value) {
  set_has_population();
  population_ = value;
}

// -------------------------------------------------------------------

// PlayerData

// optional .Database.RoleInfo role_info = 1;
inline bool PlayerData::has_role_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerData::set_has_role_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerData::clear_has_role_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerData::clear_role_info() {
  if (role_info_ != NULL) role_info_->::Database::RoleInfo::Clear();
  clear_has_role_info();
}
inline const ::Database::RoleInfo& PlayerData::role_info() const {
  return role_info_ != NULL ? *role_info_ : *default_instance_->role_info_;
}
inline ::Database::RoleInfo* PlayerData::mutable_role_info() {
  set_has_role_info();
  if (role_info_ == NULL) role_info_ = new ::Database::RoleInfo;
  return role_info_;
}
inline ::Database::RoleInfo* PlayerData::release_role_info() {
  clear_has_role_info();
  ::Database::RoleInfo* temp = role_info_;
  role_info_ = NULL;
  return temp;
}
inline void PlayerData::set_allocated_role_info(::Database::RoleInfo* role_info) {
  delete role_info_;
  role_info_ = role_info;
  if (role_info) {
    set_has_role_info();
  } else {
    clear_has_role_info();
  }
}

// repeated .Database.CityInfo city_list = 2;
inline int PlayerData::city_list_size() const {
  return city_list_.size();
}
inline void PlayerData::clear_city_list() {
  city_list_.Clear();
}
inline const ::Database::CityInfo& PlayerData::city_list(int index) const {
  return city_list_.Get(index);
}
inline ::Database::CityInfo* PlayerData::mutable_city_list(int index) {
  return city_list_.Mutable(index);
}
inline ::Database::CityInfo* PlayerData::add_city_list() {
  return city_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Database::CityInfo >&
PlayerData::city_list() const {
  return city_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Database::CityInfo >*
PlayerData::mutable_city_list() {
  return &city_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Database

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_database_2eproto__INCLUDED
