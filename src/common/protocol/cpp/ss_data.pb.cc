// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ss_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoSs {

namespace {

const ::google::protobuf::Descriptor* AccountRegReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountRegReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountRegRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountRegRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* BindAccountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BindAccountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BindAccountRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BindAccountRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* EditPasswordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EditPasswordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EditPasswordRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EditPasswordRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountVerifyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountVerifyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountVerifyRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountVerifyRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPlayerDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPlayerDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPlayerDataRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPlayerDataRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetPlayerDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPlayerDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetPlayerDataRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPlayerDataRes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SsDataProtoRet_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ss_5fdata_2eproto() {
  protobuf_AddDesc_ss_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ss_data.proto");
  GOOGLE_CHECK(file != NULL);
  AccountRegReq_descriptor_ = file->message_type(0);
  static const int AccountRegReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRegReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRegReq, password_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRegReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRegReq, player_data_),
  };
  AccountRegReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountRegReq_descriptor_,
      AccountRegReq::default_instance_,
      AccountRegReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRegReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRegReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountRegReq));
  AccountRegRes_descriptor_ = file->message_type(1);
  static const int AccountRegRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRegRes, numb_),
  };
  AccountRegRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountRegRes_descriptor_,
      AccountRegRes::default_instance_,
      AccountRegRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRegRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRegRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountRegRes));
  BindAccountReq_descriptor_ = file->message_type(2);
  static const int BindAccountReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAccountReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAccountReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAccountReq, password_hash_),
  };
  BindAccountReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BindAccountReq_descriptor_,
      BindAccountReq::default_instance_,
      BindAccountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAccountReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAccountReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BindAccountReq));
  BindAccountRes_descriptor_ = file->message_type(3);
  static const int BindAccountRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAccountRes, numb_),
  };
  BindAccountRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BindAccountRes_descriptor_,
      BindAccountRes::default_instance_,
      BindAccountRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAccountRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAccountRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BindAccountRes));
  EditPasswordReq_descriptor_ = file->message_type(4);
  static const int EditPasswordReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditPasswordReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditPasswordReq, old_password_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditPasswordReq, new_password_hash_),
  };
  EditPasswordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EditPasswordReq_descriptor_,
      EditPasswordReq::default_instance_,
      EditPasswordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditPasswordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditPasswordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EditPasswordReq));
  EditPasswordRes_descriptor_ = file->message_type(5);
  static const int EditPasswordRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditPasswordRes, numb_),
  };
  EditPasswordRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EditPasswordRes_descriptor_,
      EditPasswordRes::default_instance_,
      EditPasswordRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditPasswordRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditPasswordRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EditPasswordRes));
  AccountVerifyReq_descriptor_ = file->message_type(6);
  static const int AccountVerifyReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountVerifyReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountVerifyReq, password_hash_),
  };
  AccountVerifyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountVerifyReq_descriptor_,
      AccountVerifyReq::default_instance_,
      AccountVerifyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountVerifyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountVerifyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountVerifyReq));
  AccountVerifyRes_descriptor_ = file->message_type(7);
  static const int AccountVerifyRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountVerifyRes, numb_),
  };
  AccountVerifyRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountVerifyRes_descriptor_,
      AccountVerifyRes::default_instance_,
      AccountVerifyRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountVerifyRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountVerifyRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountVerifyRes));
  GetPlayerDataReq_descriptor_ = file->message_type(8);
  static const int GetPlayerDataReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerDataReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerDataReq, password_hash_),
  };
  GetPlayerDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPlayerDataReq_descriptor_,
      GetPlayerDataReq::default_instance_,
      GetPlayerDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPlayerDataReq));
  GetPlayerDataRes_descriptor_ = file->message_type(9);
  static const int GetPlayerDataRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerDataRes, player_data_),
  };
  GetPlayerDataRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPlayerDataRes_descriptor_,
      GetPlayerDataRes::default_instance_,
      GetPlayerDataRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerDataRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerDataRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPlayerDataRes));
  SetPlayerDataReq_descriptor_ = file->message_type(10);
  static const int SetPlayerDataReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayerDataReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayerDataReq, player_data_),
  };
  SetPlayerDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPlayerDataReq_descriptor_,
      SetPlayerDataReq::default_instance_,
      SetPlayerDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayerDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayerDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPlayerDataReq));
  SetPlayerDataRes_descriptor_ = file->message_type(11);
  static const int SetPlayerDataRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayerDataRes, numb_),
  };
  SetPlayerDataRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPlayerDataRes_descriptor_,
      SetPlayerDataRes::default_instance_,
      SetPlayerDataRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayerDataRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayerDataRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPlayerDataRes));
  SsDataProtoRet_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ss_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountRegReq_descriptor_, &AccountRegReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountRegRes_descriptor_, &AccountRegRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BindAccountReq_descriptor_, &BindAccountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BindAccountRes_descriptor_, &BindAccountRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EditPasswordReq_descriptor_, &EditPasswordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EditPasswordRes_descriptor_, &EditPasswordRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountVerifyReq_descriptor_, &AccountVerifyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountVerifyRes_descriptor_, &AccountVerifyRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPlayerDataReq_descriptor_, &GetPlayerDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPlayerDataRes_descriptor_, &GetPlayerDataRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPlayerDataReq_descriptor_, &SetPlayerDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPlayerDataRes_descriptor_, &SetPlayerDataRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ss_5fdata_2eproto() {
  delete AccountRegReq::default_instance_;
  delete AccountRegReq_reflection_;
  delete AccountRegRes::default_instance_;
  delete AccountRegRes_reflection_;
  delete BindAccountReq::default_instance_;
  delete BindAccountReq_reflection_;
  delete BindAccountRes::default_instance_;
  delete BindAccountRes_reflection_;
  delete EditPasswordReq::default_instance_;
  delete EditPasswordReq_reflection_;
  delete EditPasswordRes::default_instance_;
  delete EditPasswordRes_reflection_;
  delete AccountVerifyReq::default_instance_;
  delete AccountVerifyReq_reflection_;
  delete AccountVerifyRes::default_instance_;
  delete AccountVerifyRes_reflection_;
  delete GetPlayerDataReq::default_instance_;
  delete GetPlayerDataReq_reflection_;
  delete GetPlayerDataRes::default_instance_;
  delete GetPlayerDataRes_reflection_;
  delete SetPlayerDataReq::default_instance_;
  delete SetPlayerDataReq_reflection_;
  delete SetPlayerDataRes::default_instance_;
  delete SetPlayerDataRes_reflection_;
}

void protobuf_AddDesc_ss_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rss_data.proto\022\007ProtoSs\"Y\n\rAccountRegRe"
    "q\022\013\n\003uid\030\001 \001(\004\022\025\n\rpassword_hash\030\002 \001(\004\022\017\n"
    "\007account\030\003 \001(\014\022\023\n\013player_data\030\004 \001(\014\"\035\n\rA"
    "ccountRegRes\022\014\n\004numb\030\001 \001(\010\"E\n\016BindAccoun"
    "tReq\022\013\n\003uid\030\001 \001(\004\022\017\n\007account\030\002 \001(\014\022\025\n\rpa"
    "ssword_hash\030\003 \001(\014\"\036\n\016BindAccountRes\022\014\n\004n"
    "umb\030\001 \001(\010\"T\n\017EditPasswordReq\022\013\n\003uid\030\001 \001("
    "\004\022\031\n\021old_password_hash\030\002 \001(\004\022\031\n\021new_pass"
    "word_hash\030\003 \001(\004\"\037\n\017EditPasswordRes\022\014\n\004nu"
    "mb\030\001 \001(\010\"6\n\020AccountVerifyReq\022\013\n\003uid\030\001 \001("
    "\004\022\025\n\rpassword_hash\030\002 \001(\004\" \n\020AccountVerif"
    "yRes\022\014\n\004numb\030\001 \001(\010\"6\n\020GetPlayerDataReq\022\013"
    "\n\003uid\030\001 \001(\004\022\025\n\rpassword_hash\030\002 \001(\004\"\'\n\020Ge"
    "tPlayerDataRes\022\023\n\013player_data\030\001 \001(\014\"4\n\020S"
    "etPlayerDataReq\022\013\n\003uid\030\001 \001(\004\022\023\n\013player_d"
    "ata\030\002 \001(\014\" \n\020SetPlayerDataRes\022\014\n\004numb\030\001 "
    "\001(\010*\347\003\n\016SsDataProtoRet\022\026\n\022RET_ACCOUNT_RE"
    "G_OK\020\000\022#\n\026RET_ACCOUNT_REG_FAILED\020\377\377\377\377\377\377\377"
    "\377\377\001\022 \n\023RET_ACCOUNT_REG_DUP\020\376\377\377\377\377\377\377\377\377\001\022\027\n"
    "\023RET_BIND_ACCOUNT_OK\020\000\022$\n\027RET_BIND_ACCOU"
    "NT_FAILED\020\377\377\377\377\377\377\377\377\377\001\022%\n\030RET_BIND_ACCOUNT"
    "_REG_DUP\020\376\377\377\377\377\377\377\377\377\001\022\030\n\024RET_EDIT_PASSWORD"
    "_OK\020\000\022%\n\030RET_EDIT_PASSWORD_FAILED\020\377\377\377\377\377\377"
    "\377\377\377\001\022\031\n\025RET_ACCOUNT_VERIFY_OK\020\000\022&\n\031RET_A"
    "CCOUNT_VERIFY_FAILED\020\377\377\377\377\377\377\377\377\377\001\022\032\n\026RET_G"
    "ET_PLAYER_DATA_OK\020\000\022\'\n\032RET_GET_PLAYER_DA"
    "TA_FAILED\020\377\377\377\377\377\377\377\377\377\001\022\032\n\026RET_SET_PLAYER_D"
    "ATA_OK\020\000\022\'\n\032RET_SET_PLAYER_DATA_FAILED\020\377"
    "\377\377\377\377\377\377\377\377\001\032\002\020\001", 1133);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ss_data.proto", &protobuf_RegisterTypes);
  AccountRegReq::default_instance_ = new AccountRegReq();
  AccountRegRes::default_instance_ = new AccountRegRes();
  BindAccountReq::default_instance_ = new BindAccountReq();
  BindAccountRes::default_instance_ = new BindAccountRes();
  EditPasswordReq::default_instance_ = new EditPasswordReq();
  EditPasswordRes::default_instance_ = new EditPasswordRes();
  AccountVerifyReq::default_instance_ = new AccountVerifyReq();
  AccountVerifyRes::default_instance_ = new AccountVerifyRes();
  GetPlayerDataReq::default_instance_ = new GetPlayerDataReq();
  GetPlayerDataRes::default_instance_ = new GetPlayerDataRes();
  SetPlayerDataReq::default_instance_ = new SetPlayerDataReq();
  SetPlayerDataRes::default_instance_ = new SetPlayerDataRes();
  AccountRegReq::default_instance_->InitAsDefaultInstance();
  AccountRegRes::default_instance_->InitAsDefaultInstance();
  BindAccountReq::default_instance_->InitAsDefaultInstance();
  BindAccountRes::default_instance_->InitAsDefaultInstance();
  EditPasswordReq::default_instance_->InitAsDefaultInstance();
  EditPasswordRes::default_instance_->InitAsDefaultInstance();
  AccountVerifyReq::default_instance_->InitAsDefaultInstance();
  AccountVerifyRes::default_instance_->InitAsDefaultInstance();
  GetPlayerDataReq::default_instance_->InitAsDefaultInstance();
  GetPlayerDataRes::default_instance_->InitAsDefaultInstance();
  SetPlayerDataReq::default_instance_->InitAsDefaultInstance();
  SetPlayerDataRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ss_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ss_5fdata_2eproto {
  StaticDescriptorInitializer_ss_5fdata_2eproto() {
    protobuf_AddDesc_ss_5fdata_2eproto();
  }
} static_descriptor_initializer_ss_5fdata_2eproto_;
const ::google::protobuf::EnumDescriptor* SsDataProtoRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SsDataProtoRet_descriptor_;
}
bool SsDataProtoRet_IsValid(int value) {
  switch(value) {
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AccountRegReq::kUidFieldNumber;
const int AccountRegReq::kPasswordHashFieldNumber;
const int AccountRegReq::kAccountFieldNumber;
const int AccountRegReq::kPlayerDataFieldNumber;
#endif  // !_MSC_VER

AccountRegReq::AccountRegReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountRegReq::InitAsDefaultInstance() {
}

AccountRegReq::AccountRegReq(const AccountRegReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountRegReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  password_hash_ = GOOGLE_ULONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountRegReq::~AccountRegReq() {
  SharedDtor();
}

void AccountRegReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (player_data_ != &::google::protobuf::internal::kEmptyString) {
    delete player_data_;
  }
  if (this != default_instance_) {
  }
}

void AccountRegReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountRegReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountRegReq_descriptor_;
}

const AccountRegReq& AccountRegReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdata_2eproto();
  return *default_instance_;
}

AccountRegReq* AccountRegReq::default_instance_ = NULL;

AccountRegReq* AccountRegReq::New() const {
  return new AccountRegReq;
}

void AccountRegReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    password_hash_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_player_data()) {
      if (player_data_ != &::google::protobuf::internal::kEmptyString) {
        player_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountRegReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_password_hash;
        break;
      }

      // optional uint64 password_hash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_password_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &password_hash_)));
          set_has_password_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional bytes account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_data;
        break;
      }

      // optional bytes player_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_player_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountRegReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint64 password_hash = 2;
  if (has_password_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->password_hash(), output);
  }

  // optional bytes account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->account(), output);
  }

  // optional bytes player_data = 4;
  if (has_player_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->player_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountRegReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint64 password_hash = 2;
  if (has_password_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->password_hash(), target);
  }

  // optional bytes account = 3;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->account(), target);
  }

  // optional bytes player_data = 4;
  if (has_player_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->player_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountRegReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 password_hash = 2;
    if (has_password_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->password_hash());
    }

    // optional bytes account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional bytes player_data = 4;
    if (has_player_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->player_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountRegReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountRegReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountRegReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountRegReq::MergeFrom(const AccountRegReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_password_hash()) {
      set_password_hash(from.password_hash());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_player_data()) {
      set_player_data(from.player_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountRegReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountRegReq::CopyFrom(const AccountRegReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountRegReq::IsInitialized() const {

  return true;
}

void AccountRegReq::Swap(AccountRegReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(password_hash_, other->password_hash_);
    std::swap(account_, other->account_);
    std::swap(player_data_, other->player_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountRegReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountRegReq_descriptor_;
  metadata.reflection = AccountRegReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountRegRes::kNumbFieldNumber;
#endif  // !_MSC_VER

AccountRegRes::AccountRegRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountRegRes::InitAsDefaultInstance() {
}

AccountRegRes::AccountRegRes(const AccountRegRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountRegRes::SharedCtor() {
  _cached_size_ = 0;
  numb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountRegRes::~AccountRegRes() {
  SharedDtor();
}

void AccountRegRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountRegRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountRegRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountRegRes_descriptor_;
}

const AccountRegRes& AccountRegRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdata_2eproto();
  return *default_instance_;
}

AccountRegRes* AccountRegRes::default_instance_ = NULL;

AccountRegRes* AccountRegRes::New() const {
  return new AccountRegRes;
}

void AccountRegRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    numb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountRegRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool numb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &numb_)));
          set_has_numb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountRegRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool numb = 1;
  if (has_numb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->numb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountRegRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool numb = 1;
  if (has_numb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->numb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountRegRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool numb = 1;
    if (has_numb()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountRegRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountRegRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountRegRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountRegRes::MergeFrom(const AccountRegRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numb()) {
      set_numb(from.numb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountRegRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountRegRes::CopyFrom(const AccountRegRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountRegRes::IsInitialized() const {

  return true;
}

void AccountRegRes::Swap(AccountRegRes* other) {
  if (other != this) {
    std::swap(numb_, other->numb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountRegRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountRegRes_descriptor_;
  metadata.reflection = AccountRegRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BindAccountReq::kUidFieldNumber;
const int BindAccountReq::kAccountFieldNumber;
const int BindAccountReq::kPasswordHashFieldNumber;
#endif  // !_MSC_VER

BindAccountReq::BindAccountReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BindAccountReq::InitAsDefaultInstance() {
}

BindAccountReq::BindAccountReq(const BindAccountReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BindAccountReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BindAccountReq::~BindAccountReq() {
  SharedDtor();
}

void BindAccountReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete password_hash_;
  }
  if (this != default_instance_) {
  }
}

void BindAccountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindAccountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BindAccountReq_descriptor_;
}

const BindAccountReq& BindAccountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdata_2eproto();
  return *default_instance_;
}

BindAccountReq* BindAccountReq::default_instance_ = NULL;

BindAccountReq* BindAccountReq::New() const {
  return new BindAccountReq;
}

void BindAccountReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password_hash()) {
      if (password_hash_ != &::google::protobuf::internal::kEmptyString) {
        password_hash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BindAccountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional bytes account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password_hash;
        break;
      }

      // optional bytes password_hash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BindAccountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional bytes account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->account(), output);
  }

  // optional bytes password_hash = 3;
  if (has_password_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->password_hash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BindAccountReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional bytes account = 2;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  // optional bytes password_hash = 3;
  if (has_password_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->password_hash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BindAccountReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional bytes account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional bytes password_hash = 3;
    if (has_password_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password_hash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindAccountReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BindAccountReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BindAccountReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BindAccountReq::MergeFrom(const BindAccountReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password_hash()) {
      set_password_hash(from.password_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BindAccountReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindAccountReq::CopyFrom(const BindAccountReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindAccountReq::IsInitialized() const {

  return true;
}

void BindAccountReq::Swap(BindAccountReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(account_, other->account_);
    std::swap(password_hash_, other->password_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BindAccountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BindAccountReq_descriptor_;
  metadata.reflection = BindAccountReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BindAccountRes::kNumbFieldNumber;
#endif  // !_MSC_VER

BindAccountRes::BindAccountRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BindAccountRes::InitAsDefaultInstance() {
}

BindAccountRes::BindAccountRes(const BindAccountRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BindAccountRes::SharedCtor() {
  _cached_size_ = 0;
  numb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BindAccountRes::~BindAccountRes() {
  SharedDtor();
}

void BindAccountRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BindAccountRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindAccountRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BindAccountRes_descriptor_;
}

const BindAccountRes& BindAccountRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdata_2eproto();
  return *default_instance_;
}

BindAccountRes* BindAccountRes::default_instance_ = NULL;

BindAccountRes* BindAccountRes::New() const {
  return new BindAccountRes;
}

void BindAccountRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    numb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BindAccountRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool numb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &numb_)));
          set_has_numb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BindAccountRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool numb = 1;
  if (has_numb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->numb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BindAccountRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool numb = 1;
  if (has_numb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->numb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BindAccountRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool numb = 1;
    if (has_numb()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindAccountRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BindAccountRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BindAccountRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BindAccountRes::MergeFrom(const BindAccountRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numb()) {
      set_numb(from.numb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BindAccountRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindAccountRes::CopyFrom(const BindAccountRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindAccountRes::IsInitialized() const {

  return true;
}

void BindAccountRes::Swap(BindAccountRes* other) {
  if (other != this) {
    std::swap(numb_, other->numb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BindAccountRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BindAccountRes_descriptor_;
  metadata.reflection = BindAccountRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EditPasswordReq::kUidFieldNumber;
const int EditPasswordReq::kOldPasswordHashFieldNumber;
const int EditPasswordReq::kNewPasswordHashFieldNumber;
#endif  // !_MSC_VER

EditPasswordReq::EditPasswordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EditPasswordReq::InitAsDefaultInstance() {
}

EditPasswordReq::EditPasswordReq(const EditPasswordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EditPasswordReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  old_password_hash_ = GOOGLE_ULONGLONG(0);
  new_password_hash_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EditPasswordReq::~EditPasswordReq() {
  SharedDtor();
}

void EditPasswordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EditPasswordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EditPasswordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EditPasswordReq_descriptor_;
}

const EditPasswordReq& EditPasswordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdata_2eproto();
  return *default_instance_;
}

EditPasswordReq* EditPasswordReq::default_instance_ = NULL;

EditPasswordReq* EditPasswordReq::New() const {
  return new EditPasswordReq;
}

void EditPasswordReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    old_password_hash_ = GOOGLE_ULONGLONG(0);
    new_password_hash_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EditPasswordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_old_password_hash;
        break;
      }

      // optional uint64 old_password_hash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_password_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_password_hash_)));
          set_has_old_password_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_password_hash;
        break;
      }

      // optional uint64 new_password_hash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_password_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_password_hash_)));
          set_has_new_password_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EditPasswordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint64 old_password_hash = 2;
  if (has_old_password_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->old_password_hash(), output);
  }

  // optional uint64 new_password_hash = 3;
  if (has_new_password_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->new_password_hash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EditPasswordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint64 old_password_hash = 2;
  if (has_old_password_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->old_password_hash(), target);
  }

  // optional uint64 new_password_hash = 3;
  if (has_new_password_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->new_password_hash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EditPasswordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 old_password_hash = 2;
    if (has_old_password_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->old_password_hash());
    }

    // optional uint64 new_password_hash = 3;
    if (has_new_password_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->new_password_hash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EditPasswordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EditPasswordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EditPasswordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EditPasswordReq::MergeFrom(const EditPasswordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_old_password_hash()) {
      set_old_password_hash(from.old_password_hash());
    }
    if (from.has_new_password_hash()) {
      set_new_password_hash(from.new_password_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EditPasswordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditPasswordReq::CopyFrom(const EditPasswordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditPasswordReq::IsInitialized() const {

  return true;
}

void EditPasswordReq::Swap(EditPasswordReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(old_password_hash_, other->old_password_hash_);
    std::swap(new_password_hash_, other->new_password_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EditPasswordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EditPasswordReq_descriptor_;
  metadata.reflection = EditPasswordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EditPasswordRes::kNumbFieldNumber;
#endif  // !_MSC_VER

EditPasswordRes::EditPasswordRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EditPasswordRes::InitAsDefaultInstance() {
}

EditPasswordRes::EditPasswordRes(const EditPasswordRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EditPasswordRes::SharedCtor() {
  _cached_size_ = 0;
  numb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EditPasswordRes::~EditPasswordRes() {
  SharedDtor();
}

void EditPasswordRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EditPasswordRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EditPasswordRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EditPasswordRes_descriptor_;
}

const EditPasswordRes& EditPasswordRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdata_2eproto();
  return *default_instance_;
}

EditPasswordRes* EditPasswordRes::default_instance_ = NULL;

EditPasswordRes* EditPasswordRes::New() const {
  return new EditPasswordRes;
}

void EditPasswordRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    numb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EditPasswordRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool numb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &numb_)));
          set_has_numb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EditPasswordRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool numb = 1;
  if (has_numb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->numb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EditPasswordRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool numb = 1;
  if (has_numb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->numb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EditPasswordRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool numb = 1;
    if (has_numb()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EditPasswordRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EditPasswordRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EditPasswordRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EditPasswordRes::MergeFrom(const EditPasswordRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numb()) {
      set_numb(from.numb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EditPasswordRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditPasswordRes::CopyFrom(const EditPasswordRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditPasswordRes::IsInitialized() const {

  return true;
}

void EditPasswordRes::Swap(EditPasswordRes* other) {
  if (other != this) {
    std::swap(numb_, other->numb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EditPasswordRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EditPasswordRes_descriptor_;
  metadata.reflection = EditPasswordRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountVerifyReq::kUidFieldNumber;
const int AccountVerifyReq::kPasswordHashFieldNumber;
#endif  // !_MSC_VER

AccountVerifyReq::AccountVerifyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountVerifyReq::InitAsDefaultInstance() {
}

AccountVerifyReq::AccountVerifyReq(const AccountVerifyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountVerifyReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  password_hash_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountVerifyReq::~AccountVerifyReq() {
  SharedDtor();
}

void AccountVerifyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountVerifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountVerifyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountVerifyReq_descriptor_;
}

const AccountVerifyReq& AccountVerifyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdata_2eproto();
  return *default_instance_;
}

AccountVerifyReq* AccountVerifyReq::default_instance_ = NULL;

AccountVerifyReq* AccountVerifyReq::New() const {
  return new AccountVerifyReq;
}

void AccountVerifyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    password_hash_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountVerifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_password_hash;
        break;
      }

      // optional uint64 password_hash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_password_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &password_hash_)));
          set_has_password_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountVerifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint64 password_hash = 2;
  if (has_password_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->password_hash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountVerifyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint64 password_hash = 2;
  if (has_password_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->password_hash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountVerifyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 password_hash = 2;
    if (has_password_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->password_hash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountVerifyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountVerifyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountVerifyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountVerifyReq::MergeFrom(const AccountVerifyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_password_hash()) {
      set_password_hash(from.password_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountVerifyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountVerifyReq::CopyFrom(const AccountVerifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountVerifyReq::IsInitialized() const {

  return true;
}

void AccountVerifyReq::Swap(AccountVerifyReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(password_hash_, other->password_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountVerifyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountVerifyReq_descriptor_;
  metadata.reflection = AccountVerifyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountVerifyRes::kNumbFieldNumber;
#endif  // !_MSC_VER

AccountVerifyRes::AccountVerifyRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountVerifyRes::InitAsDefaultInstance() {
}

AccountVerifyRes::AccountVerifyRes(const AccountVerifyRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountVerifyRes::SharedCtor() {
  _cached_size_ = 0;
  numb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountVerifyRes::~AccountVerifyRes() {
  SharedDtor();
}

void AccountVerifyRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountVerifyRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountVerifyRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountVerifyRes_descriptor_;
}

const AccountVerifyRes& AccountVerifyRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdata_2eproto();
  return *default_instance_;
}

AccountVerifyRes* AccountVerifyRes::default_instance_ = NULL;

AccountVerifyRes* AccountVerifyRes::New() const {
  return new AccountVerifyRes;
}

void AccountVerifyRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    numb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountVerifyRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool numb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &numb_)));
          set_has_numb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountVerifyRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool numb = 1;
  if (has_numb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->numb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountVerifyRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool numb = 1;
  if (has_numb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->numb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountVerifyRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool numb = 1;
    if (has_numb()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountVerifyRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountVerifyRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountVerifyRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountVerifyRes::MergeFrom(const AccountVerifyRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numb()) {
      set_numb(from.numb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountVerifyRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountVerifyRes::CopyFrom(const AccountVerifyRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountVerifyRes::IsInitialized() const {

  return true;
}

void AccountVerifyRes::Swap(AccountVerifyRes* other) {
  if (other != this) {
    std::swap(numb_, other->numb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountVerifyRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountVerifyRes_descriptor_;
  metadata.reflection = AccountVerifyRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPlayerDataReq::kUidFieldNumber;
const int GetPlayerDataReq::kPasswordHashFieldNumber;
#endif  // !_MSC_VER

GetPlayerDataReq::GetPlayerDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPlayerDataReq::InitAsDefaultInstance() {
}

GetPlayerDataReq::GetPlayerDataReq(const GetPlayerDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPlayerDataReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  password_hash_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPlayerDataReq::~GetPlayerDataReq() {
  SharedDtor();
}

void GetPlayerDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPlayerDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPlayerDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPlayerDataReq_descriptor_;
}

const GetPlayerDataReq& GetPlayerDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdata_2eproto();
  return *default_instance_;
}

GetPlayerDataReq* GetPlayerDataReq::default_instance_ = NULL;

GetPlayerDataReq* GetPlayerDataReq::New() const {
  return new GetPlayerDataReq;
}

void GetPlayerDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    password_hash_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPlayerDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_password_hash;
        break;
      }

      // optional uint64 password_hash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_password_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &password_hash_)));
          set_has_password_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPlayerDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint64 password_hash = 2;
  if (has_password_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->password_hash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPlayerDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint64 password_hash = 2;
  if (has_password_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->password_hash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPlayerDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 password_hash = 2;
    if (has_password_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->password_hash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPlayerDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPlayerDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPlayerDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPlayerDataReq::MergeFrom(const GetPlayerDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_password_hash()) {
      set_password_hash(from.password_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPlayerDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerDataReq::CopyFrom(const GetPlayerDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerDataReq::IsInitialized() const {

  return true;
}

void GetPlayerDataReq::Swap(GetPlayerDataReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(password_hash_, other->password_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPlayerDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPlayerDataReq_descriptor_;
  metadata.reflection = GetPlayerDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPlayerDataRes::kPlayerDataFieldNumber;
#endif  // !_MSC_VER

GetPlayerDataRes::GetPlayerDataRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPlayerDataRes::InitAsDefaultInstance() {
}

GetPlayerDataRes::GetPlayerDataRes(const GetPlayerDataRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPlayerDataRes::SharedCtor() {
  _cached_size_ = 0;
  player_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPlayerDataRes::~GetPlayerDataRes() {
  SharedDtor();
}

void GetPlayerDataRes::SharedDtor() {
  if (player_data_ != &::google::protobuf::internal::kEmptyString) {
    delete player_data_;
  }
  if (this != default_instance_) {
  }
}

void GetPlayerDataRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPlayerDataRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPlayerDataRes_descriptor_;
}

const GetPlayerDataRes& GetPlayerDataRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdata_2eproto();
  return *default_instance_;
}

GetPlayerDataRes* GetPlayerDataRes::default_instance_ = NULL;

GetPlayerDataRes* GetPlayerDataRes::New() const {
  return new GetPlayerDataRes;
}

void GetPlayerDataRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_data()) {
      if (player_data_ != &::google::protobuf::internal::kEmptyString) {
        player_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPlayerDataRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes player_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_player_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPlayerDataRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes player_data = 1;
  if (has_player_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->player_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPlayerDataRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes player_data = 1;
  if (has_player_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->player_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPlayerDataRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes player_data = 1;
    if (has_player_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->player_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPlayerDataRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPlayerDataRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPlayerDataRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPlayerDataRes::MergeFrom(const GetPlayerDataRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_data()) {
      set_player_data(from.player_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPlayerDataRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerDataRes::CopyFrom(const GetPlayerDataRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerDataRes::IsInitialized() const {

  return true;
}

void GetPlayerDataRes::Swap(GetPlayerDataRes* other) {
  if (other != this) {
    std::swap(player_data_, other->player_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPlayerDataRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPlayerDataRes_descriptor_;
  metadata.reflection = GetPlayerDataRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetPlayerDataReq::kUidFieldNumber;
const int SetPlayerDataReq::kPlayerDataFieldNumber;
#endif  // !_MSC_VER

SetPlayerDataReq::SetPlayerDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetPlayerDataReq::InitAsDefaultInstance() {
}

SetPlayerDataReq::SetPlayerDataReq(const SetPlayerDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetPlayerDataReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  player_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPlayerDataReq::~SetPlayerDataReq() {
  SharedDtor();
}

void SetPlayerDataReq::SharedDtor() {
  if (player_data_ != &::google::protobuf::internal::kEmptyString) {
    delete player_data_;
  }
  if (this != default_instance_) {
  }
}

void SetPlayerDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPlayerDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPlayerDataReq_descriptor_;
}

const SetPlayerDataReq& SetPlayerDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdata_2eproto();
  return *default_instance_;
}

SetPlayerDataReq* SetPlayerDataReq::default_instance_ = NULL;

SetPlayerDataReq* SetPlayerDataReq::New() const {
  return new SetPlayerDataReq;
}

void SetPlayerDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_player_data()) {
      if (player_data_ != &::google::protobuf::internal::kEmptyString) {
        player_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetPlayerDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_data;
        break;
      }

      // optional bytes player_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_player_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetPlayerDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional bytes player_data = 2;
  if (has_player_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->player_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetPlayerDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional bytes player_data = 2;
  if (has_player_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->player_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetPlayerDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional bytes player_data = 2;
    if (has_player_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->player_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPlayerDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPlayerDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPlayerDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetPlayerDataReq::MergeFrom(const SetPlayerDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_player_data()) {
      set_player_data(from.player_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetPlayerDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPlayerDataReq::CopyFrom(const SetPlayerDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPlayerDataReq::IsInitialized() const {

  return true;
}

void SetPlayerDataReq::Swap(SetPlayerDataReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(player_data_, other->player_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetPlayerDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPlayerDataReq_descriptor_;
  metadata.reflection = SetPlayerDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetPlayerDataRes::kNumbFieldNumber;
#endif  // !_MSC_VER

SetPlayerDataRes::SetPlayerDataRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetPlayerDataRes::InitAsDefaultInstance() {
}

SetPlayerDataRes::SetPlayerDataRes(const SetPlayerDataRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetPlayerDataRes::SharedCtor() {
  _cached_size_ = 0;
  numb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPlayerDataRes::~SetPlayerDataRes() {
  SharedDtor();
}

void SetPlayerDataRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetPlayerDataRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPlayerDataRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPlayerDataRes_descriptor_;
}

const SetPlayerDataRes& SetPlayerDataRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fdata_2eproto();
  return *default_instance_;
}

SetPlayerDataRes* SetPlayerDataRes::default_instance_ = NULL;

SetPlayerDataRes* SetPlayerDataRes::New() const {
  return new SetPlayerDataRes;
}

void SetPlayerDataRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    numb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetPlayerDataRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool numb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &numb_)));
          set_has_numb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetPlayerDataRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool numb = 1;
  if (has_numb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->numb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetPlayerDataRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool numb = 1;
  if (has_numb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->numb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetPlayerDataRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool numb = 1;
    if (has_numb()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPlayerDataRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPlayerDataRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPlayerDataRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetPlayerDataRes::MergeFrom(const SetPlayerDataRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numb()) {
      set_numb(from.numb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetPlayerDataRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPlayerDataRes::CopyFrom(const SetPlayerDataRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPlayerDataRes::IsInitialized() const {

  return true;
}

void SetPlayerDataRes::Swap(SetPlayerDataRes* other) {
  if (other != this) {
    std::swap(numb_, other->numb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetPlayerDataRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPlayerDataRes_descriptor_;
  metadata.reflection = SetPlayerDataRes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoSs

// @@protoc_insertion_point(global_scope)
