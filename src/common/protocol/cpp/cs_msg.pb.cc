// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoCs {

namespace {

const ::google::protobuf::Descriptor* Head_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Head_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5fmsg_2eproto() {
  protobuf_AddDesc_cs_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_msg.proto");
  GOOGLE_CHECK(file != NULL);
  Head_descriptor_ = file->message_type(0);
  static const int Head_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, seq_),
  };
  Head_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Head_descriptor_,
      Head::default_instance_,
      Head_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Head));
  Msg_descriptor_ = file->message_type(1);
  static const int Msg_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, login_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, login_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, quick_reg_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, quick_reg_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, normal_reg_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, normal_reg_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, bind_account_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, bind_account_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, edit_password_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, edit_password_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, role_info_ntf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, city_list_ntf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, server_kick_off_ntf_),
  };
  Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_descriptor_,
      Msg::default_instance_,
      Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Head_descriptor_, &Head::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_descriptor_, &Msg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5fmsg_2eproto() {
  delete Head::default_instance_;
  delete Head_reflection_;
  delete Msg::default_instance_;
  delete Msg_reflection_;
}

void protobuf_AddDesc_cs_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoCs::protobuf_AddDesc_cs_5frole_2eproto();
  ::ProtoCs::protobuf_AddDesc_cs_5freg_2eproto();
  ::ProtoCs::protobuf_AddDesc_cs_5fnotify_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014cs_msg.proto\022\007ProtoCs\032\rcs_role.proto\032\014"
    "cs_reg.proto\032\017cs_notify.proto\"-\n\004Head\022\013\n"
    "\003cmd\030\001 \001(\005\022\013\n\003ret\030\002 \001(\005\022\013\n\003seq\030\003 \001(\004\"\213\005\n"
    "\003Msg\022\033\n\004head\030\001 \001(\0132\r.ProtoCs.Head\022$\n\tlog"
    "in_req\030\013 \001(\0132\021.ProtoCs.LoginReq\022$\n\tlogin"
    "_res\030\014 \001(\0132\021.ProtoCs.LoginRes\022+\n\rquick_r"
    "eg_req\030\r \001(\0132\024.ProtoCs.QuickRegReq\022+\n\rqu"
    "ick_reg_res\030\016 \001(\0132\024.ProtoCs.QuickRegRes\022"
    "-\n\016normal_reg_req\030\017 \001(\0132\025.ProtoCs.Normal"
    "RegReq\022-\n\016normal_reg_res\030\020 \001(\0132\025.ProtoCs"
    ".NormalRegRes\0221\n\020bind_account_req\030\021 \001(\0132"
    "\027.ProtoCs.BindAccountReq\0221\n\020bind_account"
    "_res\030\022 \001(\0132\027.ProtoCs.BindAccountRes\0223\n\021e"
    "dit_password_req\030\023 \001(\0132\030.ProtoCs.EditPas"
    "swordReq\0223\n\021edit_password_res\030\024 \001(\0132\030.Pr"
    "otoCs.EditPasswordRes\022,\n\rrole_info_ntf\030\361"
    ". \001(\0132\024.ProtoCs.RoleInfoNtf\022,\n\rcity_list"
    "_ntf\030\362. \001(\0132\024.ProtoCs.CityListNtf\0227\n\023ser"
    "ver_kick_off_ntf\030\363. \001(\0132\031.ProtoCs.Server"
    "KickOffNtf", 770);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_msg.proto", &protobuf_RegisterTypes);
  Head::default_instance_ = new Head();
  Msg::default_instance_ = new Msg();
  Head::default_instance_->InitAsDefaultInstance();
  Msg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5fmsg_2eproto {
  StaticDescriptorInitializer_cs_5fmsg_2eproto() {
    protobuf_AddDesc_cs_5fmsg_2eproto();
  }
} static_descriptor_initializer_cs_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Head::kCmdFieldNumber;
const int Head::kRetFieldNumber;
const int Head::kSeqFieldNumber;
#endif  // !_MSC_VER

Head::Head()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Head::InitAsDefaultInstance() {
}

Head::Head(const Head& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Head::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  ret_ = 0;
  seq_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Head::~Head() {
  SharedDtor();
}

void Head::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Head::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Head::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Head_descriptor_;
}

const Head& Head::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmsg_2eproto();
  return *default_instance_;
}

Head* Head::default_instance_ = NULL;

Head* Head::New() const {
  return new Head;
}

void Head::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    ret_ = 0;
    seq_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Head::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seq;
        break;
      }

      // optional uint64 seq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Head::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint64 seq = 3;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Head::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 seq = 3;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Head::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 seq = 3;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Head::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Head* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Head*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Head::MergeFrom(const Head& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Head::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Head::CopyFrom(const Head& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Head::IsInitialized() const {

  return true;
}

void Head::Swap(Head* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(ret_, other->ret_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Head::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Head_descriptor_;
  metadata.reflection = Head_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg::kHeadFieldNumber;
const int Msg::kLoginReqFieldNumber;
const int Msg::kLoginResFieldNumber;
const int Msg::kQuickRegReqFieldNumber;
const int Msg::kQuickRegResFieldNumber;
const int Msg::kNormalRegReqFieldNumber;
const int Msg::kNormalRegResFieldNumber;
const int Msg::kBindAccountReqFieldNumber;
const int Msg::kBindAccountResFieldNumber;
const int Msg::kEditPasswordReqFieldNumber;
const int Msg::kEditPasswordResFieldNumber;
const int Msg::kRoleInfoNtfFieldNumber;
const int Msg::kCityListNtfFieldNumber;
const int Msg::kServerKickOffNtfFieldNumber;
#endif  // !_MSC_VER

Msg::Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg::InitAsDefaultInstance() {
  head_ = const_cast< ::ProtoCs::Head*>(&::ProtoCs::Head::default_instance());
  login_req_ = const_cast< ::ProtoCs::LoginReq*>(&::ProtoCs::LoginReq::default_instance());
  login_res_ = const_cast< ::ProtoCs::LoginRes*>(&::ProtoCs::LoginRes::default_instance());
  quick_reg_req_ = const_cast< ::ProtoCs::QuickRegReq*>(&::ProtoCs::QuickRegReq::default_instance());
  quick_reg_res_ = const_cast< ::ProtoCs::QuickRegRes*>(&::ProtoCs::QuickRegRes::default_instance());
  normal_reg_req_ = const_cast< ::ProtoCs::NormalRegReq*>(&::ProtoCs::NormalRegReq::default_instance());
  normal_reg_res_ = const_cast< ::ProtoCs::NormalRegRes*>(&::ProtoCs::NormalRegRes::default_instance());
  bind_account_req_ = const_cast< ::ProtoCs::BindAccountReq*>(&::ProtoCs::BindAccountReq::default_instance());
  bind_account_res_ = const_cast< ::ProtoCs::BindAccountRes*>(&::ProtoCs::BindAccountRes::default_instance());
  edit_password_req_ = const_cast< ::ProtoCs::EditPasswordReq*>(&::ProtoCs::EditPasswordReq::default_instance());
  edit_password_res_ = const_cast< ::ProtoCs::EditPasswordRes*>(&::ProtoCs::EditPasswordRes::default_instance());
  role_info_ntf_ = const_cast< ::ProtoCs::RoleInfoNtf*>(&::ProtoCs::RoleInfoNtf::default_instance());
  city_list_ntf_ = const_cast< ::ProtoCs::CityListNtf*>(&::ProtoCs::CityListNtf::default_instance());
  server_kick_off_ntf_ = const_cast< ::ProtoCs::ServerKickOffNtf*>(&::ProtoCs::ServerKickOffNtf::default_instance());
}

Msg::Msg(const Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  login_req_ = NULL;
  login_res_ = NULL;
  quick_reg_req_ = NULL;
  quick_reg_res_ = NULL;
  normal_reg_req_ = NULL;
  normal_reg_res_ = NULL;
  bind_account_req_ = NULL;
  bind_account_res_ = NULL;
  edit_password_req_ = NULL;
  edit_password_res_ = NULL;
  role_info_ntf_ = NULL;
  city_list_ntf_ = NULL;
  server_kick_off_ntf_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg::~Msg() {
  SharedDtor();
}

void Msg::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
    delete login_req_;
    delete login_res_;
    delete quick_reg_req_;
    delete quick_reg_res_;
    delete normal_reg_req_;
    delete normal_reg_res_;
    delete bind_account_req_;
    delete bind_account_res_;
    delete edit_password_req_;
    delete edit_password_res_;
    delete role_info_ntf_;
    delete city_list_ntf_;
    delete server_kick_off_ntf_;
  }
}

void Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_descriptor_;
}

const Msg& Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmsg_2eproto();
  return *default_instance_;
}

Msg* Msg::default_instance_ = NULL;

Msg* Msg::New() const {
  return new Msg;
}

void Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::ProtoCs::Head::Clear();
    }
    if (has_login_req()) {
      if (login_req_ != NULL) login_req_->::ProtoCs::LoginReq::Clear();
    }
    if (has_login_res()) {
      if (login_res_ != NULL) login_res_->::ProtoCs::LoginRes::Clear();
    }
    if (has_quick_reg_req()) {
      if (quick_reg_req_ != NULL) quick_reg_req_->::ProtoCs::QuickRegReq::Clear();
    }
    if (has_quick_reg_res()) {
      if (quick_reg_res_ != NULL) quick_reg_res_->::ProtoCs::QuickRegRes::Clear();
    }
    if (has_normal_reg_req()) {
      if (normal_reg_req_ != NULL) normal_reg_req_->::ProtoCs::NormalRegReq::Clear();
    }
    if (has_normal_reg_res()) {
      if (normal_reg_res_ != NULL) normal_reg_res_->::ProtoCs::NormalRegRes::Clear();
    }
    if (has_bind_account_req()) {
      if (bind_account_req_ != NULL) bind_account_req_->::ProtoCs::BindAccountReq::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_bind_account_res()) {
      if (bind_account_res_ != NULL) bind_account_res_->::ProtoCs::BindAccountRes::Clear();
    }
    if (has_edit_password_req()) {
      if (edit_password_req_ != NULL) edit_password_req_->::ProtoCs::EditPasswordReq::Clear();
    }
    if (has_edit_password_res()) {
      if (edit_password_res_ != NULL) edit_password_res_->::ProtoCs::EditPasswordRes::Clear();
    }
    if (has_role_info_ntf()) {
      if (role_info_ntf_ != NULL) role_info_ntf_->::ProtoCs::RoleInfoNtf::Clear();
    }
    if (has_city_list_ntf()) {
      if (city_list_ntf_ != NULL) city_list_ntf_->::ProtoCs::CityListNtf::Clear();
    }
    if (has_server_kick_off_ntf()) {
      if (server_kick_off_ntf_ != NULL) server_kick_off_ntf_->::ProtoCs::ServerKickOffNtf::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoCs.Head head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_login_req;
        break;
      }

      // optional .ProtoCs.LoginReq login_req = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_login_res;
        break;
      }

      // optional .ProtoCs.LoginRes login_res = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_quick_reg_req;
        break;
      }

      // optional .ProtoCs.QuickRegReq quick_reg_req = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quick_reg_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quick_reg_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_quick_reg_res;
        break;
      }

      // optional .ProtoCs.QuickRegRes quick_reg_res = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quick_reg_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quick_reg_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_normal_reg_req;
        break;
      }

      // optional .ProtoCs.NormalRegReq normal_reg_req = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normal_reg_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal_reg_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_normal_reg_res;
        break;
      }

      // optional .ProtoCs.NormalRegRes normal_reg_res = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normal_reg_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal_reg_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_bind_account_req;
        break;
      }

      // optional .ProtoCs.BindAccountReq bind_account_req = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bind_account_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bind_account_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_bind_account_res;
        break;
      }

      // optional .ProtoCs.BindAccountRes bind_account_res = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bind_account_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bind_account_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_edit_password_req;
        break;
      }

      // optional .ProtoCs.EditPasswordReq edit_password_req = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edit_password_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_edit_password_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_edit_password_res;
        break;
      }

      // optional .ProtoCs.EditPasswordRes edit_password_res = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edit_password_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_edit_password_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48010)) goto parse_role_info_ntf;
        break;
      }

      // optional .ProtoCs.RoleInfoNtf role_info_ntf = 6001;
      case 6001: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_info_ntf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_info_ntf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48018)) goto parse_city_list_ntf;
        break;
      }

      // optional .ProtoCs.CityListNtf city_list_ntf = 6002;
      case 6002: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city_list_ntf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_city_list_ntf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48026)) goto parse_server_kick_off_ntf;
        break;
      }

      // optional .ProtoCs.ServerKickOffNtf server_kick_off_ntf = 6003;
      case 6003: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_kick_off_ntf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_kick_off_ntf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ProtoCs.Head head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // optional .ProtoCs.LoginReq login_req = 11;
  if (has_login_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->login_req(), output);
  }

  // optional .ProtoCs.LoginRes login_res = 12;
  if (has_login_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->login_res(), output);
  }

  // optional .ProtoCs.QuickRegReq quick_reg_req = 13;
  if (has_quick_reg_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->quick_reg_req(), output);
  }

  // optional .ProtoCs.QuickRegRes quick_reg_res = 14;
  if (has_quick_reg_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->quick_reg_res(), output);
  }

  // optional .ProtoCs.NormalRegReq normal_reg_req = 15;
  if (has_normal_reg_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->normal_reg_req(), output);
  }

  // optional .ProtoCs.NormalRegRes normal_reg_res = 16;
  if (has_normal_reg_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->normal_reg_res(), output);
  }

  // optional .ProtoCs.BindAccountReq bind_account_req = 17;
  if (has_bind_account_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->bind_account_req(), output);
  }

  // optional .ProtoCs.BindAccountRes bind_account_res = 18;
  if (has_bind_account_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->bind_account_res(), output);
  }

  // optional .ProtoCs.EditPasswordReq edit_password_req = 19;
  if (has_edit_password_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->edit_password_req(), output);
  }

  // optional .ProtoCs.EditPasswordRes edit_password_res = 20;
  if (has_edit_password_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->edit_password_res(), output);
  }

  // optional .ProtoCs.RoleInfoNtf role_info_ntf = 6001;
  if (has_role_info_ntf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6001, this->role_info_ntf(), output);
  }

  // optional .ProtoCs.CityListNtf city_list_ntf = 6002;
  if (has_city_list_ntf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6002, this->city_list_ntf(), output);
  }

  // optional .ProtoCs.ServerKickOffNtf server_kick_off_ntf = 6003;
  if (has_server_kick_off_ntf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6003, this->server_kick_off_ntf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ProtoCs.Head head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // optional .ProtoCs.LoginReq login_req = 11;
  if (has_login_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->login_req(), target);
  }

  // optional .ProtoCs.LoginRes login_res = 12;
  if (has_login_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->login_res(), target);
  }

  // optional .ProtoCs.QuickRegReq quick_reg_req = 13;
  if (has_quick_reg_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->quick_reg_req(), target);
  }

  // optional .ProtoCs.QuickRegRes quick_reg_res = 14;
  if (has_quick_reg_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->quick_reg_res(), target);
  }

  // optional .ProtoCs.NormalRegReq normal_reg_req = 15;
  if (has_normal_reg_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->normal_reg_req(), target);
  }

  // optional .ProtoCs.NormalRegRes normal_reg_res = 16;
  if (has_normal_reg_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->normal_reg_res(), target);
  }

  // optional .ProtoCs.BindAccountReq bind_account_req = 17;
  if (has_bind_account_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->bind_account_req(), target);
  }

  // optional .ProtoCs.BindAccountRes bind_account_res = 18;
  if (has_bind_account_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->bind_account_res(), target);
  }

  // optional .ProtoCs.EditPasswordReq edit_password_req = 19;
  if (has_edit_password_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->edit_password_req(), target);
  }

  // optional .ProtoCs.EditPasswordRes edit_password_res = 20;
  if (has_edit_password_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->edit_password_res(), target);
  }

  // optional .ProtoCs.RoleInfoNtf role_info_ntf = 6001;
  if (has_role_info_ntf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6001, this->role_info_ntf(), target);
  }

  // optional .ProtoCs.CityListNtf city_list_ntf = 6002;
  if (has_city_list_ntf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6002, this->city_list_ntf(), target);
  }

  // optional .ProtoCs.ServerKickOffNtf server_kick_off_ntf = 6003;
  if (has_server_kick_off_ntf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6003, this->server_kick_off_ntf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoCs.Head head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // optional .ProtoCs.LoginReq login_req = 11;
    if (has_login_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_req());
    }

    // optional .ProtoCs.LoginRes login_res = 12;
    if (has_login_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_res());
    }

    // optional .ProtoCs.QuickRegReq quick_reg_req = 13;
    if (has_quick_reg_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quick_reg_req());
    }

    // optional .ProtoCs.QuickRegRes quick_reg_res = 14;
    if (has_quick_reg_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quick_reg_res());
    }

    // optional .ProtoCs.NormalRegReq normal_reg_req = 15;
    if (has_normal_reg_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->normal_reg_req());
    }

    // optional .ProtoCs.NormalRegRes normal_reg_res = 16;
    if (has_normal_reg_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->normal_reg_res());
    }

    // optional .ProtoCs.BindAccountReq bind_account_req = 17;
    if (has_bind_account_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bind_account_req());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ProtoCs.BindAccountRes bind_account_res = 18;
    if (has_bind_account_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bind_account_res());
    }

    // optional .ProtoCs.EditPasswordReq edit_password_req = 19;
    if (has_edit_password_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edit_password_req());
    }

    // optional .ProtoCs.EditPasswordRes edit_password_res = 20;
    if (has_edit_password_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edit_password_res());
    }

    // optional .ProtoCs.RoleInfoNtf role_info_ntf = 6001;
    if (has_role_info_ntf()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_info_ntf());
    }

    // optional .ProtoCs.CityListNtf city_list_ntf = 6002;
    if (has_city_list_ntf()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->city_list_ntf());
    }

    // optional .ProtoCs.ServerKickOffNtf server_kick_off_ntf = 6003;
    if (has_server_kick_off_ntf()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_kick_off_ntf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg::MergeFrom(const Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::ProtoCs::Head::MergeFrom(from.head());
    }
    if (from.has_login_req()) {
      mutable_login_req()->::ProtoCs::LoginReq::MergeFrom(from.login_req());
    }
    if (from.has_login_res()) {
      mutable_login_res()->::ProtoCs::LoginRes::MergeFrom(from.login_res());
    }
    if (from.has_quick_reg_req()) {
      mutable_quick_reg_req()->::ProtoCs::QuickRegReq::MergeFrom(from.quick_reg_req());
    }
    if (from.has_quick_reg_res()) {
      mutable_quick_reg_res()->::ProtoCs::QuickRegRes::MergeFrom(from.quick_reg_res());
    }
    if (from.has_normal_reg_req()) {
      mutable_normal_reg_req()->::ProtoCs::NormalRegReq::MergeFrom(from.normal_reg_req());
    }
    if (from.has_normal_reg_res()) {
      mutable_normal_reg_res()->::ProtoCs::NormalRegRes::MergeFrom(from.normal_reg_res());
    }
    if (from.has_bind_account_req()) {
      mutable_bind_account_req()->::ProtoCs::BindAccountReq::MergeFrom(from.bind_account_req());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bind_account_res()) {
      mutable_bind_account_res()->::ProtoCs::BindAccountRes::MergeFrom(from.bind_account_res());
    }
    if (from.has_edit_password_req()) {
      mutable_edit_password_req()->::ProtoCs::EditPasswordReq::MergeFrom(from.edit_password_req());
    }
    if (from.has_edit_password_res()) {
      mutable_edit_password_res()->::ProtoCs::EditPasswordRes::MergeFrom(from.edit_password_res());
    }
    if (from.has_role_info_ntf()) {
      mutable_role_info_ntf()->::ProtoCs::RoleInfoNtf::MergeFrom(from.role_info_ntf());
    }
    if (from.has_city_list_ntf()) {
      mutable_city_list_ntf()->::ProtoCs::CityListNtf::MergeFrom(from.city_list_ntf());
    }
    if (from.has_server_kick_off_ntf()) {
      mutable_server_kick_off_ntf()->::ProtoCs::ServerKickOffNtf::MergeFrom(from.server_kick_off_ntf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg::CopyFrom(const Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {

  return true;
}

void Msg::Swap(Msg* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(login_req_, other->login_req_);
    std::swap(login_res_, other->login_res_);
    std::swap(quick_reg_req_, other->quick_reg_req_);
    std::swap(quick_reg_res_, other->quick_reg_res_);
    std::swap(normal_reg_req_, other->normal_reg_req_);
    std::swap(normal_reg_res_, other->normal_reg_res_);
    std::swap(bind_account_req_, other->bind_account_req_);
    std::swap(bind_account_res_, other->bind_account_res_);
    std::swap(edit_password_req_, other->edit_password_req_);
    std::swap(edit_password_res_, other->edit_password_res_);
    std::swap(role_info_ntf_, other->role_info_ntf_);
    std::swap(city_list_ntf_, other->city_list_ntf_);
    std::swap(server_kick_off_ntf_, other->server_kick_off_ntf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_descriptor_;
  metadata.reflection = Msg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoCs

// @@protoc_insertion_point(global_scope)
