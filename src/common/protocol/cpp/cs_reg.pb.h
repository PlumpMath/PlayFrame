// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_reg.proto

#ifndef PROTOBUF_cs_5freg_2eproto__INCLUDED
#define PROTOBUF_cs_5freg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ProtoCs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_5freg_2eproto();
void protobuf_AssignDesc_cs_5freg_2eproto();
void protobuf_ShutdownFile_cs_5freg_2eproto();

class QuickRegReq;
class QuickRegRes;
class NormalRegReq;
class NormalRegRes;
class BindAccountReq;
class BindAccountRes;
class EditPasswordReq;
class EditPasswordRes;

enum CsRegProtoRet {
  RET_QUICK_REG_OK = 0,
  RET_QUICK_REG_FAILED = -1,
  RET_QUICK_REG_GAMESVR_FULL = -2,
  RET_NORMAL_REG_OK = 0,
  RET_NORMAL_REG_FAILED = -1,
  RET_NORMAL_REG_GAMESVR_FULL = -2,
  RET_BIND_ACCOUNT_OK = 0,
  RET_BIND_ACCOUNT_FAILED = -1,
  RET_EDIT_PASSWORD_OK = 0,
  RET_EDIT_PASSWORD_FAILED = -1
};
bool CsRegProtoRet_IsValid(int value);
const CsRegProtoRet CsRegProtoRet_MIN = RET_QUICK_REG_GAMESVR_FULL;
const CsRegProtoRet CsRegProtoRet_MAX = RET_QUICK_REG_OK;
const int CsRegProtoRet_ARRAYSIZE = CsRegProtoRet_MAX + 1;

const ::google::protobuf::EnumDescriptor* CsRegProtoRet_descriptor();
inline const ::std::string& CsRegProtoRet_Name(CsRegProtoRet value) {
  return ::google::protobuf::internal::NameOfEnum(
    CsRegProtoRet_descriptor(), value);
}
inline bool CsRegProtoRet_Parse(
    const ::std::string& name, CsRegProtoRet* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CsRegProtoRet>(
    CsRegProtoRet_descriptor(), name, value);
}
// ===================================================================

class QuickRegReq : public ::google::protobuf::Message {
 public:
  QuickRegReq();
  virtual ~QuickRegReq();

  QuickRegReq(const QuickRegReq& from);

  inline QuickRegReq& operator=(const QuickRegReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuickRegReq& default_instance();

  void Swap(QuickRegReq* other);

  // implements Message ----------------------------------------------

  QuickRegReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuickRegReq& from);
  void MergeFrom(const QuickRegReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool numb = 1;
  inline bool has_numb() const;
  inline void clear_numb();
  static const int kNumbFieldNumber = 1;
  inline bool numb() const;
  inline void set_numb(bool value);

  // @@protoc_insertion_point(class_scope:ProtoCs.QuickRegReq)
 private:
  inline void set_has_numb();
  inline void clear_has_numb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool numb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5freg_2eproto();
  friend void protobuf_AssignDesc_cs_5freg_2eproto();
  friend void protobuf_ShutdownFile_cs_5freg_2eproto();

  void InitAsDefaultInstance();
  static QuickRegReq* default_instance_;
};
// -------------------------------------------------------------------

class QuickRegRes : public ::google::protobuf::Message {
 public:
  QuickRegRes();
  virtual ~QuickRegRes();

  QuickRegRes(const QuickRegRes& from);

  inline QuickRegRes& operator=(const QuickRegRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuickRegRes& default_instance();

  void Swap(QuickRegRes* other);

  // implements Message ----------------------------------------------

  QuickRegRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuickRegRes& from);
  void MergeFrom(const QuickRegRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const void* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional bytes password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const void* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:ProtoCs.QuickRegRes)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5freg_2eproto();
  friend void protobuf_AssignDesc_cs_5freg_2eproto();
  friend void protobuf_ShutdownFile_cs_5freg_2eproto();

  void InitAsDefaultInstance();
  static QuickRegRes* default_instance_;
};
// -------------------------------------------------------------------

class NormalRegReq : public ::google::protobuf::Message {
 public:
  NormalRegReq();
  virtual ~NormalRegReq();

  NormalRegReq(const NormalRegReq& from);

  inline NormalRegReq& operator=(const NormalRegReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalRegReq& default_instance();

  void Swap(NormalRegReq* other);

  // implements Message ----------------------------------------------

  NormalRegReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NormalRegReq& from);
  void MergeFrom(const NormalRegReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const void* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional bytes password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const void* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:ProtoCs.NormalRegReq)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5freg_2eproto();
  friend void protobuf_AssignDesc_cs_5freg_2eproto();
  friend void protobuf_ShutdownFile_cs_5freg_2eproto();

  void InitAsDefaultInstance();
  static NormalRegReq* default_instance_;
};
// -------------------------------------------------------------------

class NormalRegRes : public ::google::protobuf::Message {
 public:
  NormalRegRes();
  virtual ~NormalRegRes();

  NormalRegRes(const NormalRegRes& from);

  inline NormalRegRes& operator=(const NormalRegRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalRegRes& default_instance();

  void Swap(NormalRegRes* other);

  // implements Message ----------------------------------------------

  NormalRegRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NormalRegRes& from);
  void MergeFrom(const NormalRegRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const void* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional bytes password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const void* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:ProtoCs.NormalRegRes)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5freg_2eproto();
  friend void protobuf_AssignDesc_cs_5freg_2eproto();
  friend void protobuf_ShutdownFile_cs_5freg_2eproto();

  void InitAsDefaultInstance();
  static NormalRegRes* default_instance_;
};
// -------------------------------------------------------------------

class BindAccountReq : public ::google::protobuf::Message {
 public:
  BindAccountReq();
  virtual ~BindAccountReq();

  BindAccountReq(const BindAccountReq& from);

  inline BindAccountReq& operator=(const BindAccountReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindAccountReq& default_instance();

  void Swap(BindAccountReq* other);

  // implements Message ----------------------------------------------

  BindAccountReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BindAccountReq& from);
  void MergeFrom(const BindAccountReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const void* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional bytes password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const void* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:ProtoCs.BindAccountReq)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5freg_2eproto();
  friend void protobuf_AssignDesc_cs_5freg_2eproto();
  friend void protobuf_ShutdownFile_cs_5freg_2eproto();

  void InitAsDefaultInstance();
  static BindAccountReq* default_instance_;
};
// -------------------------------------------------------------------

class BindAccountRes : public ::google::protobuf::Message {
 public:
  BindAccountRes();
  virtual ~BindAccountRes();

  BindAccountRes(const BindAccountRes& from);

  inline BindAccountRes& operator=(const BindAccountRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindAccountRes& default_instance();

  void Swap(BindAccountRes* other);

  // implements Message ----------------------------------------------

  BindAccountRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BindAccountRes& from);
  void MergeFrom(const BindAccountRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool numb = 1;
  inline bool has_numb() const;
  inline void clear_numb();
  static const int kNumbFieldNumber = 1;
  inline bool numb() const;
  inline void set_numb(bool value);

  // @@protoc_insertion_point(class_scope:ProtoCs.BindAccountRes)
 private:
  inline void set_has_numb();
  inline void clear_has_numb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool numb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5freg_2eproto();
  friend void protobuf_AssignDesc_cs_5freg_2eproto();
  friend void protobuf_ShutdownFile_cs_5freg_2eproto();

  void InitAsDefaultInstance();
  static BindAccountRes* default_instance_;
};
// -------------------------------------------------------------------

class EditPasswordReq : public ::google::protobuf::Message {
 public:
  EditPasswordReq();
  virtual ~EditPasswordReq();

  EditPasswordReq(const EditPasswordReq& from);

  inline EditPasswordReq& operator=(const EditPasswordReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EditPasswordReq& default_instance();

  void Swap(EditPasswordReq* other);

  // implements Message ----------------------------------------------

  EditPasswordReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EditPasswordReq& from);
  void MergeFrom(const EditPasswordReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes old_password = 1;
  inline bool has_old_password() const;
  inline void clear_old_password();
  static const int kOldPasswordFieldNumber = 1;
  inline const ::std::string& old_password() const;
  inline void set_old_password(const ::std::string& value);
  inline void set_old_password(const char* value);
  inline void set_old_password(const void* value, size_t size);
  inline ::std::string* mutable_old_password();
  inline ::std::string* release_old_password();
  inline void set_allocated_old_password(::std::string* old_password);

  // optional bytes new_password = 2;
  inline bool has_new_password() const;
  inline void clear_new_password();
  static const int kNewPasswordFieldNumber = 2;
  inline const ::std::string& new_password() const;
  inline void set_new_password(const ::std::string& value);
  inline void set_new_password(const char* value);
  inline void set_new_password(const void* value, size_t size);
  inline ::std::string* mutable_new_password();
  inline ::std::string* release_new_password();
  inline void set_allocated_new_password(::std::string* new_password);

  // @@protoc_insertion_point(class_scope:ProtoCs.EditPasswordReq)
 private:
  inline void set_has_old_password();
  inline void clear_has_old_password();
  inline void set_has_new_password();
  inline void clear_has_new_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* old_password_;
  ::std::string* new_password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5freg_2eproto();
  friend void protobuf_AssignDesc_cs_5freg_2eproto();
  friend void protobuf_ShutdownFile_cs_5freg_2eproto();

  void InitAsDefaultInstance();
  static EditPasswordReq* default_instance_;
};
// -------------------------------------------------------------------

class EditPasswordRes : public ::google::protobuf::Message {
 public:
  EditPasswordRes();
  virtual ~EditPasswordRes();

  EditPasswordRes(const EditPasswordRes& from);

  inline EditPasswordRes& operator=(const EditPasswordRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EditPasswordRes& default_instance();

  void Swap(EditPasswordRes* other);

  // implements Message ----------------------------------------------

  EditPasswordRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EditPasswordRes& from);
  void MergeFrom(const EditPasswordRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool numb = 1;
  inline bool has_numb() const;
  inline void clear_numb();
  static const int kNumbFieldNumber = 1;
  inline bool numb() const;
  inline void set_numb(bool value);

  // @@protoc_insertion_point(class_scope:ProtoCs.EditPasswordRes)
 private:
  inline void set_has_numb();
  inline void clear_has_numb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool numb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5freg_2eproto();
  friend void protobuf_AssignDesc_cs_5freg_2eproto();
  friend void protobuf_ShutdownFile_cs_5freg_2eproto();

  void InitAsDefaultInstance();
  static EditPasswordRes* default_instance_;
};
// ===================================================================


// ===================================================================

// QuickRegReq

// optional bool numb = 1;
inline bool QuickRegReq::has_numb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuickRegReq::set_has_numb() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuickRegReq::clear_has_numb() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuickRegReq::clear_numb() {
  numb_ = false;
  clear_has_numb();
}
inline bool QuickRegReq::numb() const {
  return numb_;
}
inline void QuickRegReq::set_numb(bool value) {
  set_has_numb();
  numb_ = value;
}

// -------------------------------------------------------------------

// QuickRegRes

// optional bytes account = 1;
inline bool QuickRegRes::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuickRegRes::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuickRegRes::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuickRegRes::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& QuickRegRes::account() const {
  return *account_;
}
inline void QuickRegRes::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void QuickRegRes::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void QuickRegRes::set_account(const void* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QuickRegRes::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* QuickRegRes::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QuickRegRes::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes password = 2;
inline bool QuickRegRes::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuickRegRes::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuickRegRes::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuickRegRes::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& QuickRegRes::password() const {
  return *password_;
}
inline void QuickRegRes::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void QuickRegRes::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void QuickRegRes::set_password(const void* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QuickRegRes::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* QuickRegRes::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QuickRegRes::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// NormalRegReq

// optional bytes account = 1;
inline bool NormalRegReq::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NormalRegReq::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NormalRegReq::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NormalRegReq::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& NormalRegReq::account() const {
  return *account_;
}
inline void NormalRegReq::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void NormalRegReq::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void NormalRegReq::set_account(const void* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NormalRegReq::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* NormalRegReq::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NormalRegReq::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes password = 2;
inline bool NormalRegReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NormalRegReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NormalRegReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NormalRegReq::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& NormalRegReq::password() const {
  return *password_;
}
inline void NormalRegReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void NormalRegReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void NormalRegReq::set_password(const void* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NormalRegReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* NormalRegReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NormalRegReq::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// NormalRegRes

// optional bytes account = 1;
inline bool NormalRegRes::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NormalRegRes::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NormalRegRes::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NormalRegRes::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& NormalRegRes::account() const {
  return *account_;
}
inline void NormalRegRes::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void NormalRegRes::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void NormalRegRes::set_account(const void* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NormalRegRes::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* NormalRegRes::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NormalRegRes::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes password = 2;
inline bool NormalRegRes::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NormalRegRes::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NormalRegRes::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NormalRegRes::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& NormalRegRes::password() const {
  return *password_;
}
inline void NormalRegRes::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void NormalRegRes::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void NormalRegRes::set_password(const void* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NormalRegRes::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* NormalRegRes::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NormalRegRes::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BindAccountReq

// optional bytes account = 1;
inline bool BindAccountReq::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BindAccountReq::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BindAccountReq::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BindAccountReq::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& BindAccountReq::account() const {
  return *account_;
}
inline void BindAccountReq::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void BindAccountReq::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void BindAccountReq::set_account(const void* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BindAccountReq::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* BindAccountReq::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BindAccountReq::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes password = 2;
inline bool BindAccountReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BindAccountReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BindAccountReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BindAccountReq::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& BindAccountReq::password() const {
  return *password_;
}
inline void BindAccountReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void BindAccountReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void BindAccountReq::set_password(const void* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BindAccountReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* BindAccountReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BindAccountReq::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BindAccountRes

// optional bool numb = 1;
inline bool BindAccountRes::has_numb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BindAccountRes::set_has_numb() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BindAccountRes::clear_has_numb() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BindAccountRes::clear_numb() {
  numb_ = false;
  clear_has_numb();
}
inline bool BindAccountRes::numb() const {
  return numb_;
}
inline void BindAccountRes::set_numb(bool value) {
  set_has_numb();
  numb_ = value;
}

// -------------------------------------------------------------------

// EditPasswordReq

// optional bytes old_password = 1;
inline bool EditPasswordReq::has_old_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EditPasswordReq::set_has_old_password() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EditPasswordReq::clear_has_old_password() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EditPasswordReq::clear_old_password() {
  if (old_password_ != &::google::protobuf::internal::kEmptyString) {
    old_password_->clear();
  }
  clear_has_old_password();
}
inline const ::std::string& EditPasswordReq::old_password() const {
  return *old_password_;
}
inline void EditPasswordReq::set_old_password(const ::std::string& value) {
  set_has_old_password();
  if (old_password_ == &::google::protobuf::internal::kEmptyString) {
    old_password_ = new ::std::string;
  }
  old_password_->assign(value);
}
inline void EditPasswordReq::set_old_password(const char* value) {
  set_has_old_password();
  if (old_password_ == &::google::protobuf::internal::kEmptyString) {
    old_password_ = new ::std::string;
  }
  old_password_->assign(value);
}
inline void EditPasswordReq::set_old_password(const void* value, size_t size) {
  set_has_old_password();
  if (old_password_ == &::google::protobuf::internal::kEmptyString) {
    old_password_ = new ::std::string;
  }
  old_password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EditPasswordReq::mutable_old_password() {
  set_has_old_password();
  if (old_password_ == &::google::protobuf::internal::kEmptyString) {
    old_password_ = new ::std::string;
  }
  return old_password_;
}
inline ::std::string* EditPasswordReq::release_old_password() {
  clear_has_old_password();
  if (old_password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = old_password_;
    old_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EditPasswordReq::set_allocated_old_password(::std::string* old_password) {
  if (old_password_ != &::google::protobuf::internal::kEmptyString) {
    delete old_password_;
  }
  if (old_password) {
    set_has_old_password();
    old_password_ = old_password;
  } else {
    clear_has_old_password();
    old_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes new_password = 2;
inline bool EditPasswordReq::has_new_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EditPasswordReq::set_has_new_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EditPasswordReq::clear_has_new_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EditPasswordReq::clear_new_password() {
  if (new_password_ != &::google::protobuf::internal::kEmptyString) {
    new_password_->clear();
  }
  clear_has_new_password();
}
inline const ::std::string& EditPasswordReq::new_password() const {
  return *new_password_;
}
inline void EditPasswordReq::set_new_password(const ::std::string& value) {
  set_has_new_password();
  if (new_password_ == &::google::protobuf::internal::kEmptyString) {
    new_password_ = new ::std::string;
  }
  new_password_->assign(value);
}
inline void EditPasswordReq::set_new_password(const char* value) {
  set_has_new_password();
  if (new_password_ == &::google::protobuf::internal::kEmptyString) {
    new_password_ = new ::std::string;
  }
  new_password_->assign(value);
}
inline void EditPasswordReq::set_new_password(const void* value, size_t size) {
  set_has_new_password();
  if (new_password_ == &::google::protobuf::internal::kEmptyString) {
    new_password_ = new ::std::string;
  }
  new_password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EditPasswordReq::mutable_new_password() {
  set_has_new_password();
  if (new_password_ == &::google::protobuf::internal::kEmptyString) {
    new_password_ = new ::std::string;
  }
  return new_password_;
}
inline ::std::string* EditPasswordReq::release_new_password() {
  clear_has_new_password();
  if (new_password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_password_;
    new_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EditPasswordReq::set_allocated_new_password(::std::string* new_password) {
  if (new_password_ != &::google::protobuf::internal::kEmptyString) {
    delete new_password_;
  }
  if (new_password) {
    set_has_new_password();
    new_password_ = new_password;
  } else {
    clear_has_new_password();
    new_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// EditPasswordRes

// optional bool numb = 1;
inline bool EditPasswordRes::has_numb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EditPasswordRes::set_has_numb() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EditPasswordRes::clear_has_numb() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EditPasswordRes::clear_numb() {
  numb_ = false;
  clear_has_numb();
}
inline bool EditPasswordRes::numb() const {
  return numb_;
}
inline void EditPasswordRes::set_numb(bool value) {
  set_has_numb();
  numb_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoCs

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoCs::CsRegProtoRet>() {
  return ::ProtoCs::CsRegProtoRet_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_5freg_2eproto__INCLUDED
